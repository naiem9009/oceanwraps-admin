generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id                String   @id @default(cuid())
  name              String
  email             String   @unique
  address           String?
  stripeCustomerId  String?  @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  invoices          Invoice[]
  payments          Payment[]
  paymentMethods    PaymentMethod[]

  @@map("customers")
}

model PaymentMethod {
  id                    String   @id @default(cuid())
  customerId            String
  stripePaymentMethodId String   @unique
  cardFingerprint       String?
  type                  String   // card, bank_account, etc.
  last4                 String?
  brand                 String?
  expiryMonth           Int?
  expiryYear            Int?
  isDefault             Boolean  @default(false)
  createdAt             DateTime @default(now())

  customer              Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  payments              Payment[]

  @@map("payment_methods")
}

model Invoice {
  id              String        @id @default(cuid())
  invoiceNumber   String        @unique
  customerId      String
  description     String?
  totalAmount     Decimal       @db.Decimal(10, 2)
  advanceAmount   Decimal       @db.Decimal(10, 2) // 50% advance
  remainingAmount Decimal       @db.Decimal(10, 2) // 50% remaining
  status          InvoiceStatus @default(DRAFT)
  dueDate         DateTime
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  customer        Customer      @relation(fields: [customerId], references: [id])
  items           InvoiceItem[]
  payments        Payment[]

  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  description String
  quantity    Int
  rate        Decimal @db.Decimal(10, 2)
  amount      Decimal @db.Decimal(10, 2)

  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model Payment {
  id                String        @id @default(cuid())
  invoiceId         String
  customerId        String
  paymentMethodId   String?
  stripePaymentId   String?       @unique
  amount            Decimal       @db.Decimal(10, 2)
  type              PaymentType
  status            PaymentStatus @default(PENDING)
  stripeClientSecret String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  invoice           Invoice       @relation(fields: [invoiceId], references: [id])
  customer          Customer      @relation(fields: [customerId], references: [id])
  paymentMethod     PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  stripeSetupIntentId String?
  stripeSetupClientSecret String?


  @@map("payments")
}

enum InvoiceStatus {
  DRAFT
  ADVANCE_PENDING    
  ADVANCE_PAID       
  FULLY_PAID         
  OVERDUE
  CANCELLED
}

enum PaymentType {
  ADVANCE            
  REMAINING          
  FULL               
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}
